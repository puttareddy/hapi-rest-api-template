import { injectable, inject } from "inversify";
import * as Promise from "bluebird";
import {ConfigService} from "../index";
import {
    DefaultApi, GetCardStatusResponse, CreateCardRequest, CreateCardResponse,
    CardTransactionRequest, NewStatus, CardTransactionResponse,
} from "../api_clients/CardServiceAPI";

export let Symbols = {
    ICardService : Symbol("ICardService"),
};

export interface ICardService {
    CreateCard(initialAmount: number, currency: string, requestId?: string): Promise<CreateCardResponse>;
    GetCardStatus(cardReferenceId: string, requestId?: string): Promise<GetCardStatusResponse>;
    SetCardStatus(cardReferenceId: string, newStatus: string, requestId?: string): Promise<any>;
    CardTransaction(cardRefId: string, request: CardTransactionRequest,
                    requestId?: string): Promise<CardTransactionResponse>;
}

@injectable()
export class CardService implements  ICardService {
    private CardServiceApi: DefaultApi;

    constructor(
        @inject(ConfigService.Symbols.IConfig) config: ConfigService.IConfig
    ) {
        let basePath = config.get("services.card.host", "https://card:8080");
        this.CardServiceApi = new DefaultApi(basePath);
    }

    public CreateCard(initialAmount: number, currency: string, requestId?: string): Promise<CreateCardResponse> {

        let createCardRequest = new CreateCardRequest();
        createCardRequest.initialAmount = initialAmount;
        createCardRequest.currency = currency;

        return new Promise<CreateCardResponse>((resolve, reject) => {
            return this.CardServiceApi.rootPost(createCardRequest, requestId)
                .then((response) => {
                    resolve(response.body);
                })
                .catch((response) => {
                    reject(response.response);
                });
        });
    }

    public GetCardStatus(cardReferenceId: string, requestId?: string): Promise<GetCardStatusResponse> {
        return new Promise<GetCardStatusResponse>((resolve, reject) => {
            return this.CardServiceApi.cardRefIdStatusGet(cardReferenceId, requestId)
                .then((response) => {
                    resolve(response.body);
                })
                .catch((response) => {
                    reject(response.response);
                });
        });
    }

    public SetCardStatus(cardReferenceId: string, newStatus: string, requestId?: string): Promise<any> {
        let newStatusObject = new NewStatus();
        newStatusObject.status = newStatus;

        return new Promise<any>((resolve, reject) => {
            return this.CardServiceApi.cardRefIdStatusPut(cardReferenceId, newStatusObject, requestId)
                .then((response) => {
                    resolve(response.body);
                })
                .catch((error) => {
                    reject(error.body);
                });
        });
    }

    public CardTransaction(cardRefId: string, request: CardTransactionRequest,
                           requestId?: string): Promise<CardTransactionResponse> {
        return new Promise<CardTransactionResponse>((resolve, reject) => {
            return this.CardServiceApi.cardRefIdTransactionsPost(cardRefId, request, requestId)
                .then((response) => {
                    resolve(response.body);
                })
                .catch((response) => {
                    reject(response.response);
                });
        });
    }
}

export class CardStatusCode {
    public static IssuedInactive = "A";
    public static Open = "B";
    public static LostCard = "C";
    public static StolenCard = "D";
    public static NoWithdrawals = "E";
    public static Closed = "F";
    public static LostNotCaptured = "G";
    public static StolenNotCaptured = "H";
    public static Inactive = "I";
    public static CardReissue = "R";
    public static FraudBlock = "S";

    public static AllCardStatusCodes = [
        CardStatusCode.IssuedInactive,
        CardStatusCode.Open,
        CardStatusCode.LostCard,
        CardStatusCode.StolenCard,
        CardStatusCode.NoWithdrawals,
        CardStatusCode.Closed,
        CardStatusCode.LostNotCaptured,
        CardStatusCode.StolenNotCaptured,
        CardStatusCode.Inactive,
        CardStatusCode.CardReissue,
        CardStatusCode.FraudBlock,
    ];
}
