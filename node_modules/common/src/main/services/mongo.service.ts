import {inject, injectable} from "inversify";
import * as Promise from "bluebird";
import {ConfigService} from "../index";
import * as Mongo from "mongodb";

export let Symbols = {
    IMongoService: Symbol("IMongoService"),
};

export interface IMongoService {
    connect(): Promise<Mongo.Db>;
    getDb(): Promise<Mongo.Db>;
    getCollection(collectionName: string): Promise<Mongo.Collection>;
}

@injectable()
export class MongoService implements IMongoService {
    private config: ConfigService.IConfig;
    private db: Mongo.Db;

    constructor(@inject(ConfigService.Symbols.IConfig) configService: ConfigService.IConfig) {
        this.config = configService;
    }

    public connect(): Promise<Mongo.Db> {
        let connectionString = this.config.get("mongo.connectionString", "mongo://mongo/mongo");
        let connectionOptions = this.config.get("mongo.connectionOptions", {});
        return new Promise<Mongo.Db>((resolve, reject) => {
            Mongo.MongoClient
                .connect(connectionString, connectionOptions, ((error, db) => {
                    if (error) {
                        reject(error);
                        return;
                    }
                    this.db = db;
                    resolve(this.db);
                }));
        });
    }

    public getDb(): Promise<Mongo.Db> {
        if (this.db && this.db) {
            return Promise.resolve(this.db);
        }
        return this.connect();
    }

    public getCollection(collectionName: string): Promise<Mongo.Collection> {
        if (!this.db) {
            return this.getDb()
                .then((db) => {
                    return db.collection(collectionName);
                });
        }
        return Promise.resolve(this.db.collection(collectionName));
    }

}
