import * as _ from "lodash";

export let Symbols = {
    IConfig: Symbol("IConfig"),
};

export interface IConfig {
    get (key: string, fallback?: any): any;
}

export class ObjectConfig implements IConfig {
    private config: any;

    public constructor(config: any) {
        this.config = config;
    }

    public get(key: string, fallback?: any): any {
        return _.get(this.config, key, fallback);
    }
}

export class CompositeConfig implements IConfig {
    private configDicts: Array<IConfig>;

    public constructor(... configDicts: Array<IConfig>) {
        this.configDicts = configDicts;
    }

    public get(key: string, fallback?: any): any {
        let retVal: any = fallback;
        for (let i = this.configDicts.length - 1 ; i >= 0; i--) {
            retVal = this.configDicts[i].get(key, retVal);
        }
        return retVal;
    }
}
