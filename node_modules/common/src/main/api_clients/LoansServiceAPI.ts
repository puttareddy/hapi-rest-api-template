/**
 * Card Microservice
 * This service will interface with external I2C service
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable */

import request = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'https://card';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

export class BadRequestError {
    'code': number;
    'message': string;
    'fields': string;
}

export class CardHistoryResponse {
    /**
    * the opening balance of this card
    */
    'cardOpeningBalance': number;
    'cardTransactions': Array<CardTransaction>;
    /**
    * the closing balance of this card
    */
    'cardClosingBalance': number;
    /**
    * The transaction id from i2c
    */
    'transId': string;
}

export class CardTransaction {
    /**
    * transaction type ID from i2c
    */
    'transTypeId': string;
    /**
    * amount of the transaction
    */
    'amount': number;
    /**
    * Date and Time the transaction was made
    */
    'transDate': string;
    /**
    * Date the transaction was posted
    */
    'businessDate': string;
    /**
    * Available balance after the transaction
    */
    'availableBalance': number;
    /**
    * Name of merchant
    */
    'merchantName': string;
}

export class CardTransactionRequest {
    /**
    * The type of operation, either unload, empty, or reload
    */
    'type': CardTransactionRequest.TypeEnum;
    /**
    * the amount to unload or reload from the card. Not needed if operation is \"empty\"
    */
    'amount': number;
}

export namespace CardTransactionRequest {
    export enum TypeEnum {
        Unload = <any> 'unload',
        Empty = <any> 'empty',
        Reload = <any> 'reload'
    }
}
export class CardTransactionResponse {
    /**
    * The response of the empty or unload operation for this card. TRUE if success, FALSE if fail
    */
    'success': boolean;
    /**
    * The text response from i2c
    */
    'responseText': string;
    /**
    * The card reference id
    */
    'cardReferenceId': string;
    /**
    * The amount that has been unloaded from the card
    */
    'amountUnloaded': number;
    /**
    * The amount that remains on the card after the unload
    */
    'remainingBalance': number;
    /**
    * The transaction id from i2c
    */
    'transId': string;
}

export class CreateCardRequest {
    /**
    * The initial amount to be loaded on the card
    */
    'initialAmount': number;
    /**
    * The currency of the amount to be loaded on the card
    */
    'currency': string;
}

export class CreateCardResponse {
    /**
    * the reference id of the new card
    */
    'cardReferenceId': string;
    /**
    * the credit card number
    */
    'cardNumber': string;
    /**
    * the expiry date of the new card
    */
    'expiryDate': string;
    /**
    * card verification value of the new card
    */
    'cvv': number;
    /**
    * The transaction id from i2c
    */
    'transId': string;
}

export class EchoResponse {
    /**
    * The response code from i2c
    */
    'responseCode': string;
    /**
    * The response description from i2c
    */
    'responseDescription': string;
    /**
    * The transaction id from i2c
    */
    'transId': string;
}

export class GetCardStatusResponse {
    'status': GetCardStatusResponseStatus;
    'balance': number;
    'ledgerBalance': number;
}

export class GetCardStatusResponseStatus {
    'statusCode': string;
    'description': string;
}

export class ModelError {
    'code': number;
    'message': string;
    'fields': string;
}

export class NewStatus {
    /**
    * the new status
    */
    'status': string;
}


export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: request.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: request.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string;

    applyToRequest(requestOptions: request.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(_: request.Options): void {
        // Do nothing
    }
}

export enum DefaultApiApiKeys {
}

export class DefaultApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: DefaultApiApiKeys, value: string) {
        this.authentications[DefaultApiApiKeys[key]].apiKey = value;
    }
    /**
     * Get card status
     * 
     * @param cardRefId Card reference Id of the card for which status is being requested
     * @param xRequestID The ID that will be used to track this request through the system
     */
    public cardRefIdStatusGet (cardRefId: string, xRequestID?: string) : Promise<{ response: http.ClientResponse; body: GetCardStatusResponse;  }> {
        const localVarPath = this.basePath + '/{cardRefId}/status'
            .replace('{' + 'cardRefId' + '}', String(cardRefId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'cardRefId' is not null or undefined
        if (cardRefId === null || cardRefId === undefined) {
            throw new Error('Required parameter cardRefId was null or undefined when calling cardRefIdStatusGet.');
        }

        headerParams['X-Request-ID'] = xRequestID;

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: GetCardStatusResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Set card status
     * 
     * @param cardRefId Card reference Id of the card for which status is being set
     * @param newStatus 
     * @param xRequestID The ID that will be used to track this request through the system
     */
    public cardRefIdStatusPut (cardRefId: string, newStatus: NewStatus, xRequestID?: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/{cardRefId}/status'
            .replace('{' + 'cardRefId' + '}', String(cardRefId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'cardRefId' is not null or undefined
        if (cardRefId === null || cardRefId === undefined) {
            throw new Error('Required parameter cardRefId was null or undefined when calling cardRefIdStatusPut.');
        }

        // verify required parameter 'newStatus' is not null or undefined
        if (newStatus === null || newStatus === undefined) {
            throw new Error('Required parameter newStatus was null or undefined when calling cardRefIdStatusPut.');
        }

        headerParams['X-Request-ID'] = xRequestID;

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: newStatus,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Retrieve a list of card transactions
     * 
     * @param cardRefId the card reference id
     * @param startDate the start date of the card transactions
     * @param endDate the end date of the card transactions
     * @param xRequestID The ID that will be used to track this request through the system
     */
    public cardRefIdTransactionsGet (cardRefId: string, startDate: string, endDate: string, xRequestID?: string) : Promise<{ response: http.ClientResponse; body: CardHistoryResponse;  }> {
        const localVarPath = this.basePath + '/{cardRefId}/transactions'
            .replace('{' + 'cardRefId' + '}', String(cardRefId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'cardRefId' is not null or undefined
        if (cardRefId === null || cardRefId === undefined) {
            throw new Error('Required parameter cardRefId was null or undefined when calling cardRefIdTransactionsGet.');
        }

        // verify required parameter 'startDate' is not null or undefined
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling cardRefIdTransactionsGet.');
        }

        // verify required parameter 'endDate' is not null or undefined
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling cardRefIdTransactionsGet.');
        }

        if (startDate !== undefined) {
            queryParameters['startDate'] = startDate;
        }

        if (endDate !== undefined) {
            queryParameters['endDate'] = endDate;
        }

        headerParams['X-Request-ID'] = xRequestID;

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: CardHistoryResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Perform an unload, empty, or reload operation on a single card
     * 
     * @param cardRefId the card reference id
     * @param cardTransactionRequest 
     * @param xRequestID The ID that will be used to track this request through the system
     */
    public cardRefIdTransactionsPost (cardRefId: string, cardTransactionRequest: CardTransactionRequest, xRequestID?: string) : Promise<{ response: http.ClientResponse; body: CardTransactionResponse;  }> {
        const localVarPath = this.basePath + '/{cardRefId}/transactions'
            .replace('{' + 'cardRefId' + '}', String(cardRefId));
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'cardRefId' is not null or undefined
        if (cardRefId === null || cardRefId === undefined) {
            throw new Error('Required parameter cardRefId was null or undefined when calling cardRefIdTransactionsPost.');
        }

        // verify required parameter 'cardTransactionRequest' is not null or undefined
        if (cardTransactionRequest === null || cardTransactionRequest === undefined) {
            throw new Error('Required parameter cardTransactionRequest was null or undefined when calling cardRefIdTransactionsPost.');
        }

        headerParams['X-Request-ID'] = xRequestID;

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: cardTransactionRequest,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: CardTransactionResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Issue an echo request to i2c
     * 
     * @param xRequestID The ID that will be used to track this request through the system
     */
    public echoGet (xRequestID?: string) : Promise<{ response: http.ClientResponse; body: EchoResponse;  }> {
        const localVarPath = this.basePath + '/echo';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        headerParams['X-Request-ID'] = xRequestID;

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EchoResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create a new card
     * 
     * @param createCardRequest 
     * @param xRequestID The ID that will be used to track this request through the system
     */
    public rootPost (createCardRequest: CreateCardRequest, xRequestID?: string) : Promise<{ response: http.ClientResponse; body: CreateCardResponse;  }> {
        const localVarPath = this.basePath + '/';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'createCardRequest' is not null or undefined
        if (createCardRequest === null || createCardRequest === undefined) {
            throw new Error('Required parameter createCardRequest was null or undefined when calling rootPost.');
        }

        headerParams['X-Request-ID'] = xRequestID;

        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: createCardRequest,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: CreateCardResponse;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
