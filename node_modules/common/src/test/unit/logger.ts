/// <reference path="../../../typings/index.d.ts" />
import "reflect-metadata";
import * as TypeMoq from "typemoq";
import * as Winston from "winston";
import { expect } from "chai";
import { LoggerService, ILoggerService } from "../../main/services/logger.service";

let mockLogger: TypeMoq.Mock<Winston.LoggerInstance>;

describe("LoggerService", function () {
    let logger: ILoggerService;
    beforeEach(() => {
        mockLogger = TypeMoq.Mock.ofType<Winston.LoggerInstance>(Winston.Logger);
        logger = new LoggerService(mockLogger.object);
    });

    describe("getLogCode", () => {
        it("should return correct LogCode object", () => {
            let code = Math.random() * 1000;
            let httpStatusCode = Math.random() * 1000;
            logger.registerCode(code, httpStatusCode, "log-message", "response-message");
            let lc = logger.getLogCode(code);
            expect(lc.getCode()).to.equal(code);
            expect(lc.getHttpStatusCode()).to.equal(httpStatusCode);
            expect(lc.getResponseMessage()).to.equal("response-message");
        });
    });
    describe("getResponseMessage", () => {
        it("should return correct response message", () => {
            let code = Math.random() * 1000;
            let httpStatusCode = Math.random() * 1000;
            logger.registerCode(code, httpStatusCode, "log-message", "response-message");
            let responseMessage = logger.getResponseMessage(code);
            expect(responseMessage).to.equal("response-message");
        });
    });

    describe("getHttpStatusCode", () => {
        it("should return correct httpStatus Code" , () => {
            let code = Math.random() * 1000;
            let httpStatusCode = Math.random() * 1000;
            logger.registerCode(code, httpStatusCode, "log-message", "response-message");
            let httpCode = logger.getHttpStatusCode(code);
            expect(httpCode).to.equal(httpStatusCode);
        });
    });

    describe(".d", () => {
        it("should log debug", function () {
            logger.d("hi");
            mockLogger.verify(x => x.debug(TypeMoq.It.isAnyString(), TypeMoq.It.isAny(),
                TypeMoq.It.isAny()), TypeMoq.Times.once());
        });
        it("should log with error code -1", function () {
            logger.d("hi");
            mockLogger.verify(x => x.debug(TypeMoq.It.is<string>( (lm) => {
                expect(lm).to.equals("hi");
                return true;
            }), TypeMoq.It.is<any> ((meta) => {
                return meta.code === -1;
            }), TypeMoq.It.isAny()), TypeMoq.Times.once());
        });
    });

    describe(".i", () => {
        it("should log info", function () {
            logger.i(1);
            mockLogger.verify(x => x.info(TypeMoq.It.isAnyString(), TypeMoq.It.isAny(),
                TypeMoq.It.isAny()), TypeMoq.Times.once());
        });
        it("should properly generate meta", function () {
            logger.i(1, "additionalMessage", "requestId", {
                "meta" : 1,
            });
            mockLogger.verify(x => x.info(TypeMoq.It.isAnyString(), TypeMoq.It.is((meta: any) => {
                return meta.additionalMessage === "additionalMessage" &&
                        meta.requestId === "requestId" &&
                        meta.meta === 1;
            }), TypeMoq.It.isAny()), TypeMoq.Times.once());
        });
        it("should properly generate meta if additionalMeta is undefined", function () {
            logger.i(1, "additionalMessage", "requestId");
            mockLogger.verify(x => x.info(TypeMoq.It.isAnyString(), TypeMoq.It.is((meta: any) => {
                return meta.additionalMessage === "additionalMessage" &&
                    meta.requestId === "requestId";
            }), TypeMoq.It.isAny()), TypeMoq.Times.once());
        });
    });

    describe(".w", () => {
        it("should log warn", function () {
            logger.w(1);
            mockLogger.verify(x => x.warn(TypeMoq.It.isAnyString(), TypeMoq.It.isAny(),
                TypeMoq.It.isAny()), TypeMoq.Times.once());
        });
        it("should properly generate meta", function () {
            logger.w(1, "additionalMessage", "requestId", {
                "meta" : 1,
            });
            mockLogger.verify(x => x.warn(TypeMoq.It.isAnyString(), TypeMoq.It.is((meta: any) => {
                return meta.additionalMessage === "additionalMessage" &&
                    meta.requestId === "requestId" &&
                    meta.meta === 1;
            }), TypeMoq.It.isAny()), TypeMoq.Times.once());
        });
        it("should properly generate meta if additionalMeta is undefined", function () {
            logger.w(1, "additionalMessage", "requestId");
            mockLogger.verify(x => x.warn(TypeMoq.It.isAnyString(), TypeMoq.It.is((meta: any) => {
                return meta.additionalMessage === "additionalMessage" &&
                    meta.requestId === "requestId";
            }), TypeMoq.It.isAny()), TypeMoq.Times.once());
        });
    });

    describe(".e", () => {
        it("should log error", function () {
            logger.e(1);
            mockLogger.verify(x => x.error(TypeMoq.It.isAnyString(), TypeMoq.It.isAny(),
                TypeMoq.It.isAny()), TypeMoq.Times.once());
        });
        it("should properly generate meta", function () {
            logger.e(1, "additionalMessage", "requestId", {
                "meta" : 1,
            });
            mockLogger.verify(x => x.error(TypeMoq.It.isAnyString(), TypeMoq.It.is((meta: any) => {
                return meta.additionalMessage === "additionalMessage" &&
                    meta.requestId === "requestId" &&
                    meta.meta === 1;
            }), TypeMoq.It.isAny()), TypeMoq.Times.once());
        });
        it("should properly generate meta if additionalMeta is undefined", function () {
            logger.e(1, "additionalMessage", "requestId");
            mockLogger.verify(x => x.error(TypeMoq.It.isAnyString(), TypeMoq.It.is((meta: any) => {
                return meta.additionalMessage === "additionalMessage" &&
                    meta.requestId === "requestId";
            }), TypeMoq.It.isAny()), TypeMoq.Times.once());
        });
    });
});
