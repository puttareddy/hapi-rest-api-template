/// <reference path="../../../typings/index.d.ts" />

import "reflect-metadata";
import * as PQ from "proxyquire";
import * as _ from "lodash";
import * as Chai from "chai";
import {expect} from "chai";
import * as CAP from "chai-as-promised";
Chai.use(CAP);
import {ObjectConfig} from "../../main/services/config.service";
import {IMongoService} from "../../main/services/mongo.service";

// // Helper for running async/await in mocha
// // http://staxmanade.com/2015/11/testing-asyncronous-code-with-mochajs-and-es7-async-await/
//
// const mochaAsync = (fn) => {
//     return async (done) => {
//         try {
//             await fn();
//             done();
//         } catch (err) {
//             done(err);
//         }
//     };
// };
const connectOptions = {
    anotherProperty: 1000,
    timeout: 500,
};
const connectionString = "mongodb://test_connection";

const createMongoService = function(stub) {
    let MS = PQ("../../main/services/mongo.service", {
        mongodb: stub,
    });
    const config = new ObjectConfig({
        mongo: {
            connectionOptions: connectOptions,
            connectionString: connectionString,
        },
    });
    return new MS.MongoService(config);
};
describe("MongoService", () => {
    before(() => {
        PQ.noCallThru();
        PQ.noPreserveCache();
    });
    let mongoService: IMongoService;
    describe("connect", () => {
        it("should call mongoClient connect with proper params", () => {
            let connectCalledProperly = false;
            mongoService = createMongoService({
                MongoClient: {
                    connect: function (cs, co, cb) {
                        connectCalledProperly = _.isEqual(co, connectOptions) && _.isEqual(cs, connectionString);
                        cb(null, {});
                    },
                },
            });
            return mongoService.connect()
                .then(() => {
                    expect(connectCalledProperly).to.be.true;
                });
        });
        it("should reject promise if failed to connect", () => {
            let connectCalledProperly = false;
            mongoService = createMongoService({
                MongoClient: {
                    connect: function (cs, co, cb) {
                        connectCalledProperly = _.isEqual(co, connectOptions) && _.isEqual(cs, connectionString);
                        cb({}, null);
                    },
                },
            });
            return expect(mongoService.connect()).to.eventually.be.rejected;
        });
    });
    describe("getDb", () => {
        it("should call mongoClient connect with proper params (once)", () => {
            let connectCalledProperly = false;
            let count = 0;
            mongoService = createMongoService({
                MongoClient: {
                    connect: function (cs, co, cb) {
                        connectCalledProperly = _.isEqual(co, connectOptions) && _.isEqual(cs, connectionString);
                        count++;
                        cb(null, {});
                    },
                },
            });
            return mongoService.getDb()
                .then(() => {
                    return mongoService.getDb();
                })
                .then(() => {
                    expect(connectCalledProperly).to.be.true;
                    expect(count).to.eq(1);
                });
        });
    });
    describe("getCollection", () => {
        it("should call mongoClient connect with proper params (once) and return collection", () => {
            let connectCalledProperly = false;
            let count = 0;
            let collectionName = "collectionName";
            let collectionCalledProperly = false;
            mongoService = createMongoService({
                MongoClient: {
                    connect: function (cs, co, cb) {
                        connectCalledProperly = _.isEqual(co, connectOptions) && _.isEqual(cs, connectionString);
                        count++;
                        cb(null, {
                            collection: function(cn) {
                                collectionCalledProperly = cn === collectionName;
                                return {};
                            },
                        });
                    },
                },
            });
            return mongoService.getCollection(collectionName)
                .then((c) => {
                    expect(connectCalledProperly).to.be.true;
                    expect(count).to.eq(1);
                });
        });
    });
});
