/// <reference path="../../../typings/index.d.ts" />
import { expect, assert } from "chai";
import {ConfigService} from "../../main/index";

describe("Config", function () {

    describe("ObjectConfig", function () {
        describe("get", function () {
            it("should return the requested config value if exists", function () {
                let conf = new ConfigService.ObjectConfig({"dog": "Good Dog"});
                expect(conf.get("dog", "hi")).to.equal("Good Dog");
            });

            it("should return the fallback value if doesn't exist", function () {
                let conf = new ConfigService.ObjectConfig({"dog": "Good Dog"});
                expect(conf.get("cat", "hi")).to.equal("hi");
            });
        });
    });

    describe("CompositeConfig", function () {
        describe("get", function () {
            it("should return the primary config value if exists", function () {
                let conf = new ConfigService.CompositeConfig(
                    new ConfigService.ObjectConfig({"dog": "Good Dog"}),
                    new ConfigService.ObjectConfig({"cat": "Great Cat"})
                );
                expect(conf.get("dog", "hi")).to.equal("Good Dog");
            });
            it("should return the primary config value if both exists", function () {
                let conf = new ConfigService.CompositeConfig(
                    new ConfigService.ObjectConfig({"dog": "Good Dog"}),
                    new ConfigService.ObjectConfig({"dog": "Great Cat"})
                );
                expect(conf.get("dog", "hi")).to.equal("Good Dog");
            });
            it("should return the secondary value if doesn't exist", function () {
                let conf = new ConfigService.CompositeConfig(
                    new ConfigService.ObjectConfig({"dog": "Good Dog"}),
                    new ConfigService.ObjectConfig({"cat": "Great Cat"})
                );
                expect(conf.get("cat", "hi")).to.equal("Great Cat");
            });

            it("should return the fallback value if doesn't exist", function () {
                let conf = new ConfigService.CompositeConfig(
                    new ConfigService.ObjectConfig({"dog": "Good Dog"}),
                    new ConfigService.ObjectConfig({"cat": "Great Cat"})
                );
                expect(conf.get("horse", "hi")).to.equal("hi");
            });

            it("should accept N dictionaries, and return the first value", function () {
                let conf = new ConfigService.CompositeConfig(
                    new ConfigService.ObjectConfig(
                        {"dog": "Hey Dog", "newt": "lizarding"}
                    ),
                    new ConfigService.ObjectConfig(
                        {"cat": "Cool Cat", "horse": "The Neighs have it"}
                    ),
                    new ConfigService.ObjectConfig({
                        "dog": "Wrong Dog",
                        "horse": "Making me hoarse",
                        "goat": "afloat",
                    })
                );

                expect(conf.get("newt")).to.equal("lizarding");
                expect(conf.get("dog")).to.equal("Hey Dog");
                expect(conf.get("cat")).to.equal("Cool Cat");
                expect(conf.get("horse")).to.equal("The Neighs have it");
                expect(conf.get("goat")).to.equal("afloat");
                expect(conf.get("eel", "real")).to.equal("real");
            });

            it("Should work with just one", function () {
                let conf = new ConfigService.CompositeConfig(
                    new ConfigService.ObjectConfig({"key": "val"}));

                expect(conf.get("key")).to.equal("val");
                expect(conf.get("missing", "fallback")).to.equal("fallback");
            });

            it("Should allow for no dicts, and just return the fallback", () => {
                let conf = new ConfigService.CompositeConfig();
                expect(conf.get("key", "fallback")).to.equal("fallback");
                assert(typeof conf.get("someKey") === "undefined");
            });

            it("Should be able to fall back a ton of times", () => {
                let conf = new ConfigService.CompositeConfig(
                    new ConfigService.ObjectConfig({}),
                    new ConfigService.ObjectConfig({}),
                    new ConfigService.ObjectConfig({}),
                    new ConfigService.ObjectConfig({})
                );
                expect(conf.get("key", "fallback")).to.equal("fallback");
            });
        });
    });

});
