/// <reference path="../../../typings/index.d.ts" />
import "reflect-metadata";
import * as TypeMoq from "typemoq";
import * as Consul from "consul";
import * as Promise from "bluebird";
import { ConsulService } from "../../main/services/consul.service";

describe("ConsulService", function () {

    let mockKv: TypeMoq.Mock<Consul.Kv> =
        TypeMoq.Mock.ofType<Consul.Kv>(Consul.Kv);

    mockKv
        .setup(x => x.set(TypeMoq.It.isAnyString(), TypeMoq.It.isAnyString()))
        .returns((key, val) => new Promise(resolve => { resolve(true); }));

    mockKv
        .setup(x => x.get(TypeMoq.It.isAnyString()))
        .returns((key) => new Promise(resolve => { resolve({ Value: "cool" }); }));

    let mockConsul: TypeMoq.Mock<Consul.Consul> =
        TypeMoq.Mock.ofType<Consul.Consul>(Consul);

    mockConsul
        .setup(x => x.kv)
        .returns(() => mockKv.object);

    let service = new ConsulService(mockConsul.object);

    it("should call set", function () {
        service.setValueForKey("hi", "cool");
        mockKv.verify(x => x.set(TypeMoq.It.isAnyString(), TypeMoq.It.isAnyString()), TypeMoq.Times.once());
    });

    it("should call get", function () {
        service.getValueForKey("hi");
        mockKv.verify(x => x.get(TypeMoq.It.isAnyString()), TypeMoq.Times.once());
    });

});
