/// <reference path="../../../typings/index.d.ts" />
import "reflect-metadata";
import { expect } from "chai";
import * as nock from "nock";
import {IConfig} from "../../main/services/config.service";
import {CardService} from "../../main/index";
import {
    GetCardStatusResponse, CreateCardResponse, GetCardStatusResponseStatus, NewStatus,
    CardTransactionResponse, CardTransactionRequest,
} from "../../main/api_clients/CardServiceAPI";
import {CardStatusCode} from "../../main/services/card.service";
import TypeEnum = CardTransactionRequest.TypeEnum;

const HOST = "https://card";

describe("CardService ", () => {
    let cardService: CardService.ICardService;
    beforeEach(() => {
        cardService = new CardService.CardService(<IConfig> {
            get: (key, fallback) => {
                return HOST;
            },
        });
    });
    it("should call https://card/{cardRefId}/status with GET request", () => {

        let cardReferenceId = "card_ref_id";

        let getCardStatusResponse = new GetCardStatusResponse();
        getCardStatusResponse.status = new GetCardStatusResponseStatus();
        getCardStatusResponse.status.statusCode = CardStatusCode.Open;
        getCardStatusResponse.status.description = "Fine";
        getCardStatusResponse.balance = 1000;
        getCardStatusResponse.ledgerBalance = 1000;

        nock(HOST)
            .get(`/${cardReferenceId}/status`)
            .reply(200, {data: getCardStatusResponse});

        return cardService.GetCardStatus(cardReferenceId)
            .then( (response: any) => {
                expect(response.data).to.deep.equal(getCardStatusResponse);
            });
    });
    it("should call https://card/{cardRefId}/status with PUT request", () => {

        let cardReferenceId = "card_ref_id";
        let newStatus = new NewStatus();
        newStatus.status = "A";

        nock(HOST)
            .put(`/${cardReferenceId}/status`, JSON.stringify(newStatus))
            .reply(200, {data: "done"});

        return cardService.SetCardStatus(cardReferenceId, newStatus.status)
            .then( (response: any) => {
                expect(response.data).to.deep.equal("done");
            });
    });
    it("should call https://card/ with POST request", () => {
        let initialAmount = 100;
        let currency = "CAD";

        let createCardResponse = new CreateCardResponse();
        createCardResponse.cardNumber = "1234-5678-9101-1121";
        createCardResponse.cvv = 111;
        createCardResponse.cardReferenceId = "card_ref_id";
        createCardResponse.expiryDate = "1107";

        nock(HOST)
            .post("/")
            .reply(201, {data: createCardResponse});

        return cardService.CreateCard(initialAmount, currency)
            .then( (response: any) => {
                expect(response.data).to.deep.equal(createCardResponse);
            });
    });
    it("should call https://card/{cardRefId}/transactions with POST request with empty", () => {

        let cardReferenceId = "card_ref_id";

        let req = new CardTransactionRequest();
        req.amount = 100;
        req.type = TypeEnum.Unload;

        let resp = new CardTransactionResponse();
        resp.cardReferenceId = cardReferenceId;
        resp.amountUnloaded = 100;
        resp.remainingBalance = 200;

        nock(HOST)
            .post(`/${cardReferenceId}/transactions`)
            .reply(200, {data: resp});

        return cardService.CardTransaction(cardReferenceId, req)
            .then( (response: any) => {
                expect(response.data).to.deep.equal(resp);
            });
    });
    it("should call https://card/{cardRefId}/transactions with POST request with unload", () => {

        let cardReferenceId = "card_ref_id";

        let req = new CardTransactionRequest();
        req.amount = 100;
        req.type = TypeEnum.Empty;

        let resp = new CardTransactionResponse();
        resp.cardReferenceId = cardReferenceId;
        resp.amountUnloaded = 100;
        resp.remainingBalance = 200;

        nock(HOST)
            .post(`/${cardReferenceId}/transactions`)
            .reply(200, {data: resp});

        return cardService.CardTransaction(cardReferenceId, req)
            .then( (response: any) => {
                expect(response.data).to.deep.equal(resp);
            });
    });
});
